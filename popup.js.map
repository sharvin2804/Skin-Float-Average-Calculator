{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://skin-float-calculator/webpack/bootstrap","webpack://skin-float-calculator/webpack/runtime/compat get default export","webpack://skin-float-calculator/webpack/runtime/define property getters","webpack://skin-float-calculator/webpack/runtime/hasOwnProperty shorthand","webpack://skin-float-calculator/./src/popup.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","'use strict';\n\nimport './popup.css';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const calculateButton = document.getElementById('button');\n    const resultContainer = document.getElementById('result-container');\n    let activeTabId = null; // To store the tab ID for scripting\n\n    // Function to update result area appearance\n    function showMessage(message, type = 'info') {\n        resultContainer.textContent = message;\n        resultContainer.className = ''; // Remove previous classes\n        if (type) {\n            resultContainer.classList.add(type);\n        }\n    }\n\n    // --- Check current tab URL on popup open ---\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n        if (chrome.runtime.lastError) {\n            showMessage(\"Error querying tabs: \" + chrome.runtime.lastError.message, 'error');\n            return;\n        }\n        if (!tabs || tabs.length === 0 || !tabs[0].url) {\n            showMessage(\"Could not get current tab information.\", 'error');\n            return;\n        }\n\n        const currentTab = tabs[0];\n        activeTabId = currentTab.id; // Store the active tab ID\n        let hostname;\n        try {\n            hostname = new URL(currentTab.url).hostname;\n        } catch (e) {\n            showMessage(\"Invalid URL detected.\", 'info');\n            calculateButton.disabled = true;\n            return;\n        }\n\n\n        // --- Enable/Disable Button based on hostname ---\n        const allowedHosts = ['skinport.com', 'csfloat.com'];\n        // Check if the hostname *is* or *ends with* (for subdomains like www.) the allowed hosts\n        const isAllowedSite = allowedHosts.some(host => hostname === host || hostname.endsWith('.' + host));\n\n\n        if (isAllowedSite) {\n            calculateButton.disabled = false;\n            showMessage(\"Ready to calculate floats.\", 'info'); // Clear initial message\n        } else {\n            calculateButton.disabled = true;\n            showMessage(\"Navigate to skinport.com or csfloat.com to start calculation.\", 'info');\n        }\n    });\n\n    // --- Add listener for the calculate button ---\n    calculateButton.addEventListener('click', () => {\n        if (!activeTabId) {\n            showMessage(\"Could not identify the active tab.\", 'error');\n            return;\n        }\n\n        showMessage(\"Calculating...\", 'info'); // Show feedback\n        calculateButton.disabled = true; // Disable button during calculation\n\n        // --- Execute script on the active tab ---\n        chrome.scripting.executeScript(\n            {\n                target: { tabId: activeTabId },\n                function: scrapeFloatsAndCalculateAverage, // The function to inject\n            },\n            (injectionResults) => {\n                 // Re-enable button regardless of outcome\n                calculateButton.disabled = false;\n\n                // --- Handle results from the injected script ---\n                if (chrome.runtime.lastError) {\n                    showMessage(\"Script injection failed: \" + chrome.runtime.lastError.message, 'error');\n                    return;\n                }\n\n                if (!injectionResults || injectionResults.length === 0) {\n                    showMessage(\"Script did not return a result.\", 'error');\n                    return;\n                }\n\n                const result = injectionResults[0].result;\n\n                if (result && result.error) {\n                    showMessage(result.error, 'error'); // Show error from the scraping function\n                } else if (result && typeof result.average === 'number') {\n                    const avgFormatted = result.average.toFixed(6); // Format to 6 decimal places\n                    showMessage(`Found ${result.count} floats.\\nAverage: ${avgFormatted}`, 'success');\n                } else {\n                    showMessage(\"Received an unexpected result from the page.\", 'error');\n                }\n            }\n        );\n    });\n});\n\n// --- Function to be injected into the webpage ---\n// This function runs in the context of the webpage, NOT the popup.\nfunction scrapeFloatsAndCalculateAverage() {\n    // IMPORTANT: Add selectors for BOTH sites here.\n    // Skinport uses 'ItemListView-wear'. Find the equivalent for CSFloat.\n    // Example: Let's assume CSFloat uses 'span.float-value' (REPLACE THIS WITH THE ACTUAL SELECTOR)\n    const skinportSelector = 'span.ItemListView-wear';\n    const csfloatSelector = 'div.wear.ng-star-inserted';\n\n    // Combine selectors\n    const floatElements = document.querySelectorAll(`${skinportSelector}, ${csfloatSelector}`);\n\n    if (floatElements.length === 0) {\n        return { error: \"No float elements found on the page (make sure floats are visible).\" };\n    }\n\n    const numbers = [];\n    let parseErrors = 0;\n\n    // floatElements.forEach(element => {\n    //     const text = element.textContent.trim();\n    //     if (text) {\n    //         const num = parseFloat(text);\n    //         if (!isNaN(num)) {\n    //             numbers.push(num);\n    //         } else {\n    //             parseErrors++;\n    //             console.warn(`Skin Float Calculator: Could not parse float from text: \"${text}\"`);\n    //         }\n    //     }\n    // });\n    const floatRegex = /\\((\\d+(\\.\\d+)?)\\)/;\n\n    floatElements.forEach(element => {\n        const text = element.textContent; // Example: \"FN (0.00165) \" or just \"0.12345\"\n\n        if (text) {\n            let floatString = null;\n\n            // Try extracting using the regex first (for the CSFloat format)\n            const match = text.match(floatRegex);\n            if (match && match[1]) {\n                // match[0] is the full match like \"(0.00165)\"\n                // match[1] is the captured group, the number itself \"0.00165\"\n                floatString = match[1];\n            } else {\n                // If regex doesn't match, assume it might be the direct float (Skinport format)\n                // Trim whitespace just in case\n                const trimmedText = text.trim();\n                // Basic check if it looks like a number before trying parseFloat\n                 if (/^-?\\d+(\\.\\d+)?$/.test(trimmedText)) {\n                    floatString = trimmedText;\n                 }\n            }\n\n            // If we extracted a potential float string, try parsing it\n            if (floatString !== null) {\n                const num = parseFloat(floatString);\n                if (!isNaN(num)) {\n                    numbers.push(num);\n                } else {\n                     parseErrors++;\n                     console.warn(`Skin Float Calculator: Regex matched or direct text found, but could not parse float from: \"${floatString}\"`);\n                }\n            } else {\n                 // Only count as error if the text wasn't just whitespace\n                 if (text.trim() !== '') {\n                    parseErrors++;\n                    console.warn(`Skin Float Calculator: Could not find float pattern or direct float in text: \"${text}\"`);\n                 }\n            }\n        }\n    });\n\n    if (numbers.length === 0) {\n         if (parseErrors > 0) {\n             return { error: `Found ${floatElements.length} potential elements, but failed to parse any valid numbers.` };\n         } else {\n            return { error: \"Found elements, but none contained parseable float numbers.\" };\n         }\n    }\n\n    const sum = numbers.reduce((acc, val) => acc + val, 0);\n    const average = sum / numbers.length;\n\n    // Return result object back to the popup script\n    return {\n        average: average,\n        count: numbers.length\n    };\n}"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","scrapeFloatsAndCalculateAverage","floatElements","document","querySelectorAll","length","error","numbers","parseErrors","floatRegex","forEach","element","text","textContent","floatString","match","trimmedText","trim","test","num","parseFloat","isNaN","console","warn","push","average","reduce","acc","val","count","addEventListener","calculateButton","getElementById","resultContainer","activeTabId","showMessage","message","type","className","classList","add","chrome","tabs","query","active","currentWindow","runtime","lastError","url","currentTab","hostname","id","URL","e","disabled","some","host","endsWith","scripting","executeScript","target","tabId","function","injectionResults","result","avgFormatted","toFixed"],"sourceRoot":""}